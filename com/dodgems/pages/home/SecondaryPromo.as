package com.dodgems.pages.home{	import com.gaiaframework.templates.AbstractPage;	import com.gaiaframework.events.*;	import com.gaiaframework.debug.*;	import com.gaiaframework.api.*;	import com.greensock.TweenMax;	import com.greensock.easing.*;		import com.dodgems.Global;	import com.dodgems.pages.HomePage;		import flash.display.*;	import flash.text.*;	import flash.events.*;	import flash.geom.Rectangle;	import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.net.navigateToURL;	import flash.geom.Point;	import flash.utils.Timer;	import flash.media.SoundChannel;	import flash.media.Sound;	import flash.media.SoundTransform;		public class SecondaryPromo extends Sprite {				public var dataXML:XMLList;				private var currentNavSet:Number = 0;		private var totalNavSet:Number;		private const NAV_ITEMS_VISIBLE:Number = 4;		private const NAV_MASK_WIDTH:Number = 955;		private const NAV_HEIGHT:Number = 250;		private const NAV_SPACER:Number = 250; //slant depth		private const NAV_INSET:Number = 90; //to embed the nav left for design 		private var currentLoading:int = 0;				private var navContainer:Sprite;		private var navMask:Sprite;				private var navButPrev:SimpleButton;		private var navButNext:SimpleButton;				private var navArr:Array = new Array();						public function SecondaryPromo(d:XMLList) {			dataXML = d;			totalNavSet = Math.floor(dataXML.elements().length() / NAV_ITEMS_VISIBLE)			addEventListener(Event.ADDED_TO_STAGE, onAdded, false, 0, true);			addEventListener(Event.REMOVED_FROM_STAGE, onRemoved, false, 0, true);		}								private function buildNav():void {						navContainer = new Sprite();			addChild(navContainer);						navButPrev = new LeftArrow();			addChild(navButPrev);			navButPrev.y = (NAV_HEIGHT / 2) - (navButPrev.height / 2);						navButNext = new RightArrow();			addChild(navButNext);			navButNext.x = NAV_MASK_WIDTH - navButNext.width;			navButNext.y = (NAV_HEIGHT / 2) - (navButPrev.height / 2);						navButNext.addEventListener(MouseEvent.CLICK, scrollNext, false, 0, true);			navButPrev.addEventListener(MouseEvent.CLICK, scrollPrev, false, 0, true);			enableScrollers();						navMask = new Sprite();			navMask.graphics.beginFill(0x000000, 1);			navMask.graphics.drawRect(0, 0, (NAV_MASK_WIDTH - (navButNext.width + navButPrev.width)), (NAV_HEIGHT * 3));			navMask.graphics.endFill();			addChild(navMask);			navMask.mouseChildren = false;			navMask.mouseEnabled = false;						navMask.x = navButPrev.width;			navMask.y -= (NAV_HEIGHT);			navContainer.x = -NAV_INSET;			navContainer.mask = navMask;						createElement();		}						private function createElement():void {						if (currentLoading < dataXML.elements().length()) {								var nav:SecondaryElement = new SecondaryElement( dataXML.promo[currentLoading].@img_bottom, createElement, currentLoading);				nav.addEventListener(MouseEvent.CLICK, navClick, false, 0, true);				nav.addEventListener(MouseEvent.MOUSE_OVER, onOver, false, 0, true);				nav.addEventListener(MouseEvent.MOUSE_DOWN, onDown, false, 0, true);				nav.addEventListener(MouseEvent.MOUSE_OUT, onOut, false, 0, true);				nav.buttonMode = true;								var arr:Array = [nav, dataXML.promo[currentLoading].@url];								navArr.push(arr);				nav.x = currentLoading * NAV_SPACER;				currentLoading++;				navContainer.addChild(nav);								//to wait for all navs to be loaded before becoming hot				nav.addEventListener(MouseEvent.CLICK, navClick, false, 0, true);				//mc.hit.addEventListener(MouseEvent.MOUSE_OVER, onOver);				//mc.hit.addEventListener(MouseEvent.MOUSE_OUT, onOut);				nav.buttonMode = true;							}		}				////////////////////////////////////////////////////////////HANDLERS				private function onOver(e:MouseEvent):void {			var nav:SecondaryElement = e.currentTarget as SecondaryElement;			nav.rollOver();			navContainer.addChild(nav);		}				private function onOut(e:MouseEvent):void {			var nav:SecondaryElement = e.currentTarget as SecondaryElement;			nav.rollOut();		}				private function onDown(e:MouseEvent):void {			 //Gaia.api.getPage("index/nav").content.playSound("midNavSound");		}				private function navClick(e:MouseEvent):void {			var link:SecondaryElement = e.currentTarget as SecondaryElement;			var id:int = link.id;			var keyword:String = navArr[id][1];			if(keyword.substr(0, 4) == "http"){				navigateToURL(new URLRequest(keyword), "_blank");			} else {				Gaia.api.getPage("index/nav").content.siteNavCall(keyword);			}		}				private function scrollNext(e:MouseEvent):void {			if ((currentNavSet + 1) < totalNavSet) {				currentNavSet += 1;				var goto:Number = (NAV_MASK_WIDTH * currentNavSet) + NAV_INSET;								TweenMax.to(navContainer, 1, {x:-goto, ease:Quint.easeInOut});				enableScrollers();			}		}						private function enableScrollers():void {			navButPrev.mouseEnabled = navButPrev.enabled = (currentNavSet > 0);			navButPrev.alpha = (navButPrev.enabled ? 1.0 : 0.3);			navButNext.mouseEnabled = navButNext.enabled = (currentNavSet + 1 < totalNavSet);			navButNext.alpha = (navButNext.enabled ? 1.0 : 0.3);		}						private function scrollPrev(e:MouseEvent):void {						if(currentNavSet > 0){				currentNavSet -= 1;				var goto:Number = (NAV_MASK_WIDTH * currentNavSet) + NAV_INSET;				TweenMax.to(navContainer, 1, {x:-goto, ease:Quint.easeInOut});								enableScrollers();			}		}						public function onAdded(e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, onAdded);			buildNav();		}						private function onRemoved(e:Event):void {			removeEventListener(Event.REMOVED_FROM_STAGE, onRemoved);		}					}}