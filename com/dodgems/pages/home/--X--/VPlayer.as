package com.dodgems.pages.home{	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Stage;	import flash.display.StageDisplayState;		import flash.text.TextField;	import flash.net.URLRequest;	import flash.net.navigateToURL;		import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.FullScreenEvent;		import flash.media.SoundTransform;	import flash.utils.getTimer;	import flash.geom.Rectangle;		import com.dodgems.Global;			dynamic public class VPlayer extends MovieClip {				private var loadingIndicator:MovieClip;		public var isPlaying:Boolean;				public var _vidSeekTime:Number;				// Video Seek Time		public var _vidCurrTime:Number;				// Video Current Time								public var _vidDuration:Number;				public var _soundTransform:SoundTransform;	// Sound Transformer		public var _lastSoundValue:Number = 1;		// Last Sound Value				public var xmlLoc:String;		public var navTitle:String;		public var currentSubSection:String;		public var dataArr:Array = new Array();		public var dataXML:XML = new XML();				public var VID_WIDTH:Number = 756;		public var VID_HEIGHT:Number = 465;				public var maskClip:Sprite;				public var bottomBarMC:MovieClip;				public var playButMC:MovieClip;		public var scrubButMC:MovieClip;		public var scrubBarMC:MovieClip;		public var audioButMC:MovieClip;		public var closeButMC:MovieClip;		public var fullscreenButMC:MovieClip;		public var shareButMC:MovieClip;				public var promoImg:MovieClip;				public var timeText:TextField;		public var titleText:TextField;				public var vidPlayer:VideoPlayback;				public var isMuted:Boolean;				public var isEmbedded:Boolean;		public var isFullScreen:Boolean;		public var controlsOpened:Boolean;		private var isAutoRun:Boolean;				public var currentChoice:Number = 0;				public var callBack:Function;				private var videoAsset:String;		private var shareURL:String;				public var bottom:MovieClip;				private const FS_IS_FULLSCREEN : String = 'isFullscreen';		private const FS_IS_NOT_FULLSCREEN : String = 'isNotFullscreen';		private var fullscreenState : String = FS_IS_NOT_FULLSCREEN;				public function VPlayer() {						addEventListener(Event.ADDED_TO_STAGE, onAddedToStage, false, 0, true);					}				public function onAddedToStage(event:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);						isEmbedded = false;//(parent != stage);						addEventListener(Event.REMOVED_FROM_STAGE, dispose, false, 0, true);						bottomBarMC = bottom;						playButMC = bottomBarMC.getChildByName("playBut") as MovieClip;			playButMC.buttonMode = true;						scrubButMC = bottomBarMC.getChildByName("carat") as MovieClip;			scrubButMC.buttonMode = true;						scrubBarMC = bottomBarMC.getChildByName("scrubBar") as MovieClip;						audioButMC = bottomBarMC.getChildByName("audioBut") as MovieClip;			audioButMC.buttonMode = true;			audioButMC.gotoAndStop(4);						fullscreenButMC = bottomBarMC.getChildByName("fullscreen") as MovieClip;			fullscreenButMC.buttonMode = true;						shareButMC = bottomBarMC.getChildByName("shareBut") as MovieClip;			shareButMC.buttonMode = true;						loadingIndicator = getChildByName("twirlyArrow") as MovieClip;			loadingIndicator.mouseEnabled = loadingIndicator.mouseChildren = false;						promoImg = bottomBarMC.getChildByName("promo_img") as MovieClip;		}								public function dispose(...ignore):void {			try {				playButMC.removeEventListener(MouseEvent.CLICK, playButClick);				audioButMC.removeEventListener(MouseEvent.CLICK, audioButClick);				fullscreenButMC.removeEventListener(MouseEvent.CLICK, fullscreenToggle);				scrubButMC.removeEventListener(MouseEvent.MOUSE_DOWN, handleCaratDown);				scrubButMC.removeEventListener(MouseEvent.MOUSE_UP, handleCaratUp);				scrubButMC.removeEventListener(MouseEvent.MOUSE_MOVE, scrubLogic);				shareButMC.removeEventListener(MouseEvent.CLICK, shareClick)				stage.removeEventListener(MouseEvent.MOUSE_UP, handleCaratUp);				stage.removeEventListener(FullScreenEvent.FULL_SCREEN, catchFullscreenEsc);				removeEventListener(Event.REMOVED_FROM_STAGE, dispose);				vidPlayer.unloadVid();								if (hasEventListener(Event.ENTER_FRAME)) {					removeEventListener(Event.ENTER_FRAME, handleEnterFrame);				}								while (numChildren > 0) removeChildAt(0);			} catch (e:Error) {}		}				public function initPlayer($src:String, $call:Function, autoplay:Boolean, $share:String):void {			videoAsset = $src;			callBack = $call;			isAutoRun = autoplay;			shareURL = $share;			setupVideo();		}						private function initVidControls():void {			playButMC.addEventListener(MouseEvent.CLICK, playButClick, false, 0, true);			playButMC.buttonMode = true;			playButMC.gotoAndStop(2);						audioButMC.addEventListener(MouseEvent.CLICK, audioButClick, false, 0, true);			audioButMC.buttonMode = true;						fullscreenButMC.addEventListener(MouseEvent.CLICK, fullscreenToggle, false, 0, true);			fullscreenButMC.buttonMode = true;									scrubButMC.addEventListener(MouseEvent.MOUSE_DOWN, handleCaratDown, false, 0, true);			scrubButMC.buttonMode = true;						shareButMC.addEventListener(MouseEvent.CLICK, shareClick, false, 0, true)		}						private function shareClick(e:MouseEvent):void {			navigateToURL(new URLRequest(shareURL), "_blank");		}						public function startPlay():void {			addEventListener(Event.ENTER_FRAME, handleEnterFrame, false, 0, true);		}						public function setupVideo():void {						vidPlayer = new VideoPlayback( videoAsset, VID_WIDTH, VID_HEIGHT, callBack, startPlay );						addChild(vidPlayer);			vidPlayer.y = 20;			vidPlayer.visible = false;						initVidControls();						addChild(loadingIndicator);		}										/******************************************		**HANDLERS		*/				private function playButClick(e:MouseEvent):void {						vidPlayer.visible = true;			if (isPlaying){				playButMC.gotoAndStop(2);				isPlaying = false;				vidPlayer.pauseVid();			} else {				promoImg.visible = false;				playButMC.gotoAndStop(1);				isPlaying = true;				vidPlayer.resumeVid();			}		}						private function scrubBarClick(e:MouseEvent):void {						var timechoice:Number = (scrubBarMC.mouseX/scrubBarMC.width) * vidPlayer.vidDuration;			vidPlayer.vidSeek(timechoice);			trace(timechoice);		}						private function audioButClick(e:MouseEvent):void {						if(!isMuted) {				_lastSoundValue = 0;				isMuted = true;				audioButMC.gotoAndStop(1);				vidPlayer.mute(true);							} else if(Global.GLOBALVOLUME != 0) {				isMuted = false;								var playpoint:Number = Math.round((vidPlayer._volume)*4) + 1;				audioButMC.gotoAndStop(2);				vidPlayer.mute(false);							}		}						private function handleEnterFrame(e:Event):void {						if (vidPlayer != null) loadingIndicator.visible = (vidPlayer.buffering && isPlaying);						if(vidPlayer.vidPlayed && vidPlayer.vidPlayed > 0 && isPlaying) {				var goto:Number = vidPlayer.vidPlayed * scrubBarMC.width;				scrubButMC.x = (scrubBarMC.x + goto);								if(promoImg.hitTestPoint(stage.mouseX, stage.mouseY)) {					bottomBarMC.visible = true;					bottomBarMC.alpha -= (bottomBarMC.alpha - 1)*.2;				} else {					bottomBarMC.visible = false;					bottomBarMC.alpha = 0;				}			}		}						private function handleCaratDown(e:MouseEvent):void {			scrubButMC.addEventListener(MouseEvent.MOUSE_UP, handleCaratUp, false, 0, true);			stage.addEventListener(MouseEvent.MOUSE_UP, handleCaratUp, false, 0, true);						removeEventListener(Event.ENTER_FRAME, handleEnterFrame);			vidPlayer.pauseVid();			var rect:Rectangle = new Rectangle(scrubBarMC.x, (scrubBarMC.y - ((scrubButMC.height - scrubBarMC.height)/2)), scrubBarMC.width, 0); 			scrubButMC.startDrag(false, rect);			scrubButMC.addEventListener(MouseEvent.MOUSE_MOVE, scrubLogic, false, 0, true);		}				private function handleCaratUp(e:MouseEvent):void {			scrubButMC.removeEventListener(MouseEvent.MOUSE_UP, handleCaratUp);			stage.removeEventListener(MouseEvent.MOUSE_UP, handleCaratUp);						scrubButMC.stopDrag();			scrubButMC.removeEventListener(MouseEvent.MOUSE_MOVE, scrubLogic);						vidPlayer.resumeVid();			addEventListener(Event.ENTER_FRAME, handleEnterFrame, false, 0, true);		}				private function scrubLogic(e:MouseEvent):void {			var perc:Number = (scrubButMC.x - scrubBarMC.x) / scrubBarMC.width;			var goto:Number = Math.ceil((perc*vidPlayer.vidDuration));			vidPlayer.vidSeek(goto);		}				// fullscreen and recover		private function fullscreenToggle( event : MouseEvent ):void {			var rect:Rectangle = new Rectangle(100, 0, (vidPlayer.width+10), vidPlayer.height);			stage.fullScreenSourceRect = rect;			if( fullscreenState == FS_IS_NOT_FULLSCREEN ){				stage.displayState = StageDisplayState.FULL_SCREEN;				stage.addEventListener(FullScreenEvent.FULL_SCREEN, catchFullscreenEsc, false, 0, true);				fullscreenState = FS_IS_FULLSCREEN;			} else {				stage.displayState = StageDisplayState.NORMAL;				fullscreenState = FS_IS_NOT_FULLSCREEN;			}		}				// catch 'esc' fullscreen		private function catchFullscreenEsc( event : FullScreenEvent ):void {			stage.removeEventListener( FullScreenEvent.FULL_SCREEN, catchFullscreenEsc );			fullscreenState = FS_IS_NOT_FULLSCREEN;		}						/////////////////////////////////////////////////////////////GET/SET						public function set _embedded(s:Boolean){			isEmbedded = s;		}				public function set _callBack(f:Function){			callBack = f;		}			}}