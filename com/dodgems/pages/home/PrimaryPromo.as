package com.dodgems.pages.home {		import com.barliesque.VideoStreamEvent;	import com.dodgems.grid.gadget.VideoPlayer;	import com.gaiaframework.templates.AbstractPage;	import com.gaiaframework.events.*;	import com.gaiaframework.debug.*;	import com.gaiaframework.api.*;	import com.greensock.TweenMax;	import com.greensock.easing.*;	import com.barliesque.OrganicDissolve;	import com.dodgems.Global;	import com.dodgems.pages.HomePage;	import flash.display.*;	import flash.net.navigateToURL;	import flash.text.*;	import flash.events.*;	import flash.net.URLRequest;	import flash.utils.Timer;		public class PrimaryPromo extends Sprite {				public var bg:MovieClip;		public var masker:MovieClip;		public var nav:MovieClip;				public var dataXML:XMLList;				public var id:String;		public var currentItem:int = -1;				public var isOpen:Boolean;		public var isOver:Boolean;				public var imgClip:Sprite;		public var maskClip:MovieClip;		public var hitClip:MovieClip;		public var videoBut:MovieClip;				private var currentImg:Sprite;		private var vPlayer:VideoPlayer;				private var imgLoader:Loader;		private var promoTimer:Timer;		private var lastLoad:Sprite;				private var wipeMap:BitmapData;		private var organicDissolve:OrganicDissolve;				public var largePlayBut:MovieClip;				private var navButtons:Array;		private var navIndicator:Sprite;						public function PrimaryPromo(d:XMLList) {			dataXML = d;			addEventListener(Event.ADDED_TO_STAGE, onAdded, false, 0, true);			addEventListener(Event.REMOVED_FROM_STAGE, onRemoved, false, 0, true);						//			//  The Video Button will be revealed when we're on a video promo			//			videoBut.scaleX = videoBut.scaleY = 0.001;			videoBut.useHandCursor = videoBut.enabled = videoBut.mouseEnabled = false;		}						public function onAdded(e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, onAdded);						bg.y = -bg.height;			masker.mouseEnabled = masker.mouseChildren = false;						TweenMax.to(bg, .3, { y:0, ease:Strong.easeOut, blurFilter: { blurX: 5, blurY: 5, quality: 0.5, remove:true }} );						imgClip = new Sprite();						addChild(imgClip);			addChild(masker);			addChild(hitClip);			addChild(nav);			addChild(videoBut);			videoBut.visible = false;						imgClip.x = hitClip.x = masker.x;									// Pixel Bender			wipeMap = new SpeedMap(770, 490) as BitmapData;			organicDissolve = new OrganicDissolve(wipeMap, 0);						nav.visible = false;			nav.gotoAndStop(1);						promoTimer = new Timer(5000);			promoTimer.addEventListener(TimerEvent.TIMER, timerTest, false, 0, true);			promoTimer.start();						addEventListener(Event.ENTER_FRAME, controlTimer, false, 0, true);						//			//  Initialize buttons			//						nav.visible = true;			nav.play();			var posTarget:MovieClip = nav.loadpoint;			posTarget.cacheAsBitmap = true;						navButtons = [];						for (var i:int; i < dataXML.elements().length(); i++) {				var mc:MovieClip = new ScrollNum() as MovieClip;				var txt:TextField = mc.txt;				txt.htmlText = (i+1).toString() + ".";				txt.mouseEnabled = true;				posTarget.addChild(mc);				mc.x = (i * mc.width);				mc.name = "nav" + i;				mc.addEventListener(MouseEvent.CLICK, butClick, false, 0, true);				mc.buttonMode = true;				mc.hitArea = mc["hit"];				navButtons.push(mc);			}						navIndicator = new Sprite();			navIndicator.graphics.beginFill(0xFFFFFF);			navIndicator.graphics.drawRect(0, 30, 24, 4);			navIndicator.graphics.endFill();			posTarget.addChildAt(navIndicator, 0);			navIndicator.x = navButtons[0].x;						if ((posTarget.x + posTarget.width) > nav.bg.x) {				nav.bg.width = (posTarget.x + posTarget.width + 10) - nav.bg.x;			}			posTarget.alpha = 1;						videoBut.addEventListener(MouseEvent.CLICK, videoButClick, false, 0, true);			videoBut.addEventListener(MouseEvent.MOUSE_OVER, videoButOver, false, 0, true);			videoBut.addEventListener(MouseEvent.MOUSE_OUT, videoButOut, false, 0, true);			videoBut.addEventListener(MouseEvent.MOUSE_DOWN, videoButDown, false, 0, true);			videoBut.buttonMode = true;			videoBut.visible = true;						nav.y += 10;						selectItem(0);		}				private function controlTimer(e:Event):void {						if (masker.hitTestPoint(stage.mouseX, stage.mouseY)) {				if (promoTimer.running) promoTimer.stop();			} else {				if (!promoTimer.running) {					promoTimer.reset();					promoTimer.start();				}			}		}				private function timerTest(...e):void {			if (vPlayer) {				if (!vPlayer.isPlaying) nextRequest();			} else {				nextRequest();			}		}				private function nextRequest(...e:*):void {			killVplayer();			var k:int = (currentItem + 1) < dataXML.elements().length() ? (currentItem + 1) : 0;			selectItem(k);		}				private function selectItem(num:int):void {			if (num == currentItem) return;			currentItem = num;			TweenMax.to(navIndicator, 0.8, { x: navButtons[num].x, ease: Quint.easeInOut, overwrite: 1 } );						promoTimer.reset();						imgLoader = new Loader();			if (dataXML.promo[currentItem].@isVideo == "true") {				showVideoButton(false);				imgLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, imageBehindVideoLoaded, false, 0, true);				imgLoader.load(new URLRequest(dataXML.promo[currentItem].@videoimg));			} else {				if (vPlayer) killVplayer();				showVideoButton(true);				imgLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, imagePromoLoaded, false, 0, true);				imgLoader.load(new URLRequest(dataXML.promo[currentItem].@asset));			}		}						private function imagePromoLoaded(e:Event):void {var where:String = "A";			try {				if (imgLoader == null) return;				if (imgLoader.contentLoaderInfo == null) return;where = "B";				imgLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, imagePromoLoaded);				imgLoader = null;where = "C";				var img:Sprite = new Sprite();				currentImg = img;				currentImg.visible = false;where = "D";				currentImg.addChild(e.currentTarget.content);where = "E";				imgClip.addChild(currentImg);				lastLoad = img;where = "F";				startDissolve();			} catch (e:Error) {				trace("Caught error in PrimaryPromo.imagePromoLoaded() at " + where);				trace(e.getStackTrace());			}			promoTimer.start();		}				private function imageBehindVideoLoaded(e:Event):void {						if (imgLoader == null) return;			if (imgLoader.contentLoaderInfo == null) return;						imgLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, imageBehindVideoLoaded);			imgLoader = null;						var img:Sprite = new Sprite();			currentImg = img;			currentImg.visible = false;			currentImg.addChild(e.currentTarget.content);			imgClip.addChild(currentImg);			lastLoad = img;			if (vPlayer == null) vPlayer = new VideoPlayer();			vPlayer.width = 756;			vPlayer.height = 490;			vPlayer.x = masker.x;			vPlayer.controlsMarginY = 25;			vPlayer.controlsMarginX = 40;						startDissolve();						vPlayer.alpha = 0;			vPlayer.x = masker.x - 100;			TweenMax.to(vPlayer, 0.5, { x: masker.x, alpha: 1, overwrite: 2 } );						vPlayer.video.addEventListener(VideoStreamEvent.VIDEO_ENDED, closeMovie, false, 0, true);			vPlayer.open(dataXML.promo[currentItem].@asset, false);						addChild(vPlayer);			addChild(masker);			addChild(nav);			addChild(videoBut);						promoTimer.start();		}				public function closeMovie(...ignore):void {			killVplayer();			showVideoButton(true);			nextRequest();		}					private function killVplayer():void {			if (vPlayer) {				vPlayer.video.removeEventListener(VideoStreamEvent.VIDEO_ENDED, closeMovie);				vPlayer.dispose();				removeChild(vPlayer);				vPlayer = null;			}		}		private function onRemoved(e:Event):void {						removeEventListener(Event.REMOVED_FROM_STAGE, onRemoved);						removeEventListener(Event.ENTER_FRAME, controlTimer);						promoTimer.stop(); 			promoTimer.removeEventListener(TimerEvent.TIMER, timerTest);			promoTimer = null;						if (imgLoader) {				imgLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, imagePromoLoaded);			}						killVplayer();						while (numChildren > 0) removeChildAt(0);		}				private function butClick(e:MouseEvent):void {			var n:Number = Number(e.currentTarget.name.substring(3));			selectItem(n);		}				private function videoButClick(e:MouseEvent):void {			showVideoButton(false);						for(var i:int; i < dataXML.elements().length(); i++){				if (dataXML.promo[i].@isVideo == "true") {					selectItem(i);					return;				}			}		}				private function videoButDown(e:MouseEvent):void {			videoBut.gotoAndStop(3);		}				private function videoButOver(e:MouseEvent):void {			videoBut.gotoAndStop(2);		}				private function videoButOut(e:MouseEvent):void {			videoBut.gotoAndStop(1);		}				private function startDissolve():void {			organicDissolve.dissolve = 0.0;			lastLoad.filters = null;			currentImg.filters = [organicDissolve];			TweenMax.to(organicDissolve, 1, { dissolve: 1.0, onUpdate: updateFilter, ease:Strong.easeInOut } );		}				private function updateFilter():void {			organicDissolve.update();						var filters:Array = currentImg.filters;			currentImg.filters = filters;			currentImg.visible = true;		}		private function showVideoButton(show:Boolean):void {						if (show) {				videoBut.visible = true;				TweenMax.to(videoBut, 1.5, { scaleX: 1.0, scaleY: 1.0, delay: 2.0, ease: Elastic.easeOut } );				hitClip.addEventListener(MouseEvent.CLICK, hitClick, false, 0, true);			} else {				TweenMax.to(videoBut, 0.6, { scaleX: 0.001, scaleY: 0.001, ease: Back.easeIn, overwrite: 1 } );				hitClip.removeEventListener(MouseEvent.CLICK, hitClick);			}			videoBut.useHandCursor = videoBut.enabled = videoBut.mouseEnabled = hitClip.buttonMode = show;					}				private function hitClick(e:MouseEvent):void {			var url:String = dataXML.promo[currentItem].@url;						if (url.substr(0, 4) == "http") {				navigateToURL(new URLRequest(url), "_blank");			} else {				Gaia.api.getPage("index/nav").content.siteNavCall(url);			}		}			}}