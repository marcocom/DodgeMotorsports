package com.dodgems.pages.nav {		import com.gaiaframework.templates.AbstractPage;	import com.gaiaframework.events.*;	import com.gaiaframework.debug.*;	import com.gaiaframework.api.*;	import flash.display.*;	import flash.text.*;	import flash.events.*;	import flash.geom.Rectangle;	import flash.net.URLRequest;	import com.greensock.TweenMax;	import com.greensock.easing.*;		public class NavElement extends Sprite {				private var linkTitle:String;		public var linkID:String;		public var index:int;				private var txtClip:NavTxt;		public var hit:Sprite;				private var rollover:Sprite;		private var img:Sprite;		private var masker:Sprite;				private var isEnabled:Boolean;		internal var field:TextField				private var forcedRotation:Number;		private var rolloverLoader:Loader;						public function NavElement(linkTitle:String, linkID:String, enabled:Boolean, index:int)	{			this.linkTitle = linkTitle;			this.linkID = linkID;			this.isEnabled = enabled;			this.index = index;						buildElement();		}						private function buildElement():void {			rollover = new Sprite();			img = new Sprite();						var rolloverAsset:String = isEnabled ? ("img/nav/" + linkID + ".png") : "img/nav/comingsoon.png";						rolloverLoader = new Loader();			rolloverLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, rolloverLoaded, false, 0, true);			rolloverLoader.load(new URLRequest(rolloverAsset));						txtClip = new NavTxt();			field = txtClip.getChildByName("txt") as TextField;			field.htmlText = linkTitle;			field.autoSize = TextFieldAutoSize.LEFT;			field.width = field.textWidth;						hit = new Sprite();			hit.graphics.beginFill(0xFFFFFF, 0);			hit.graphics.drawRect(0, 0, (field.textWidth + 10), (field.textHeight + 10));			hit.graphics.endFill();									txtClip.x = -(txtClip.width/2);			txtClip.y = -(txtClip.height/2);						hit.x = -(hit.width/2);			hit.y = -(hit.height/2);						revealRollover(false);		}						private function rolloverLoaded(e:Event):void {			rolloverLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, rolloverLoaded);						rollover.addChild(img);			img.addChild(e.target.content);						addChild(rollover);			addChild(txtClip);			addChild(hit)						rollover.x = -(e.target.content.width / 2);			rollover.y = -(e.target.content.height / 2);						masker = new Sprite();			masker.graphics.beginFill(0xFFFFFF, 0.25);			masker.graphics.drawRect(0, 0, e.target.content.width, e.target.content.height);			masker.graphics.endFill();						rollover.addChild(masker);			rollover.mouseEnabled = false;						img.mask = masker;		}						public function revealRollover(showit:Boolean):void {			img.visible = showit || locked;						addChild(hit);			if (showit || locked) {				if (masker != null) {					masker.y = (masker.height / 2);					masker.scaleY = 0.0;					TweenMax.to(masker, .5, { y:0, scaleY:1, ease:Strong.easeOut } );				}				if (!isEnabled) field.htmlText = "COMING SOON";				txtClip.x = -(txtClip.width / 2);				parent.setChildIndex(this, locked ? 0 : (parent.numChildren - 1));			} else {				field.htmlText = linkTitle;				txtClip.x = -(txtClip.width / 2);			}		}						public function lockRollover(locked:Boolean):void {			hit.mouseEnabled = !locked;			revealRollover(locked);		}				public function get locked():Boolean { return !hit.mouseEnabled; }			}}