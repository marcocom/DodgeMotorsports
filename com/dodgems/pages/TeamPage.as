package com.dodgems.pages {	import com.barliesque.DataLoader;	import com.barliesque.DataTree;	import com.dodgems.grid.GridPage;	import com.dodgems.grid.gadget.News;	import com.gaiaframework.api.Gaia;	import com.greensock.easing.Quint;	import com.greensock.TweenMax;	public class TeamPage extends GridPage {				// on-stage		public var news:News;				public function TeamPage() {			super(3);	// 3 Grid Cells		}				override protected function init():void {			if (Gaia.api) {				dataXML = assets.teamXML.xml;				alpha = 0;			}						super.init();		}				override public function doAction(action:String, params:Array = null):void {			super.doAction(action, params);						var xml:XML = itemXML();			switch (action) {				case "news":					if (activeGadget == infoBox) {						// First Fade out the infoBox!						TweenMax.to(infoBox, 0.5, { alpha: 0, onComplete: showNewsHeadlines, onCompleteParams: [params] } );					} else {						// Show News Headlines						showNewsHeadlines(params);					}					break;									case "newsItem":					// Hide headlines and show the news item					var hover:String = currentCell.data.@hover;					var side:String = hover.split(":")[1];					xml = params[1];					infoBox.show([side], xml);					activeGadget = infoBox;					break;			}		}				private function showNewsHeadlines(params:Array):void {			infoBox.y = -infoBox.height;			activeGadget = news;			news.show(params, itemXML());		}				override protected function dispose():void {			news.dispose();			news = null;			super.dispose();		}						//------------------------------------------------		//  FOR STANDALONE TESTING OUTSIDE GAIA		//		override protected function test():void {			dataTree = new DataTree();			dataTree.load("xml/team.xml", testLoaded);		}		private var dataTree:DataTree;		private function testLoaded(data:XML):void {			dataXML = data;			init();			updateGrid("");		}		//------------------------------------------------			}}