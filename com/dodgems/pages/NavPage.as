package com.dodgems.pages {		import com.gaiaframework.flow.CrossFlow;	import com.gaiaframework.templates.AbstractPage;	import com.gaiaframework.events.*;	import com.gaiaframework.debug.*;	import com.gaiaframework.api.*;	import flash.display.*;	import flash.events.*;	import flash.text.TextField;	import flash.geom.Rectangle;	import flash.media.Sound;	import flash.media.SoundChannel;	import com.greensock.TweenMax;	import com.dodgems.pages.nav.*;		import flash.utils.Timer;		import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;		import flash.external.ExternalInterface;		import flash.utils.getDefinitionByName;	import com.dodgems.Global;	import com.greensock.TweenMax;	import com.greensock.easing.*;			public class NavPage extends AbstractPage {				public var navClip:NavClip;		public var vipClip:VIPWidget;				public var nativeHeight:Number = Global.NATIVEHEIGHT;		public var nativeWidth:Number = Global.NATIVEWIDTH;				private var dataXML:XML;		private var currentSection:String; //doesnt include deeplink		private var currentDeep:String;		private var currentTrack:String;		private var trackTimer:Timer;				private var isNavSelect:Boolean;				public var audioMute:Boolean;		private var audioBut:AudioIconClip;						//--------------------------------------------------------------------------						public function NavPage() {			super();						addEventListener(Event.ADDED_TO_STAGE, onAdded, false, 0, true);						trackTimer = new Timer(10000, 1);			trackTimer.addEventListener(TimerEvent.TIMER_COMPLETE, timedTrack, false, 0, true);						//if (Gaia.api) {				//Gaia.api.beforeTransitionIn(positionNav);				//Gaia.api.afterTransitionIn(positionNav);				//Gaia.api.afterComplete(positionNav);				//Gaia.api.beforeGoto(positionNav);			//}		}						public function showNav(show:Boolean):void {			if (show) {				positionNav();				TweenMax.to(navClip, 1.0, { alpha: 1, onComplete: positionNav } );			} else {				TweenMax.to(navClip, 1.0, { alpha: 0, onComplete: extractNav } );			}		}				private function extractNav():void {			addChild(navClip);		}						private function onAdded(e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, onAdded);			//			//  Resize			//			audioBut = new AudioIconClip();			addChild(audioBut);			audioBut.addEventListener(MouseEvent.CLICK, audioClick, false, 0, true);			audioBut.buttonMode = true;			audioBut.visible = false;			stage.addEventListener(Event.RESIZE, onResize, false, 0, true);			onResize(null);		}						override public function transitionIn():void {			init();						var currentDeeplink:String = Gaia.api.getDeeplink();			onDeeplink(new GaiaSWFAddressEvent(GaiaSWFAddressEvent.DEEPLINK, false, false, currentDeeplink));						super.transitionIn();			transitionInComplete();		}						private function init():void {			var sndExplodeChannel:SoundChannel;			var sndExplode:sfxRevTakingoff;			sndExplode = new sfxRevTakingoff();			sndExplodeChannel = sndExplode.play(); 						audioBut.visible = true;						dataXML = assets.navXML.xml;			navClip = new NavClip(dataXML.topnav, navCall);		}								public function siteNavCall(branch:String):void {			if (branch == "vip"){				createVIP();				return;			}						var id:String = branch.split("/")[0];						for(var i:int; i < dataXML.topnav.nav.length(); i++){				if (id == dataXML.topnav.nav[i].@id) {					currentDeep = branch;					navCall(id);					return;				}			}		}						public function navCall(id:String, menuClick:Boolean = false):void {			var prefix:String = "index/nav/";			if (menuClick) currentDeep = null;			var go:String = (currentDeep != null ? currentDeep : id);			if (go.substr(0, prefix.length) != prefix) go = prefix + go;			trace("NavPage.navCall... " + go);			var section:String = Gaia.api.getCurrentBranch().split("/")[2];						//			//  Only navigate if we're actually going somewhere *else*			//			if (section != id) {				var deep:Boolean = go.split("/").length > 3;				isNavSelect = !deep;								if (deep) currentDeep = go;								currentSection = id;				navClip.selectID(id);								Gaia.api.goto(go);			}						if (vipClip) {				if (vipClip.parent) removeChild(vipClip);			}						if (ExternalInterface.available) {				ExternalInterface.call("function() { window.scrollTo(0,0) }");			}					}										override public function onDeeplink(e:GaiaSWFAddressEvent):void {						if (isNavSelect) {				//trace("NAV:  This navigation was caused by a click on the Nav menu -- NOT a Deeplink");				return;			}			var section:String = Gaia.api.getCurrentBranch().split("/")[2];			var found:Boolean = false;						for(var i:int; i < dataXML.topnav.nav.length(); i++) {				if (section == dataXML.topnav.nav[i].@id) {					currentSection = dataXML.topnav.nav[i].@id;					found = true;					navClip.selectID(currentSection);				}			}						if (!found) {				addChild(navClip);				positionNav();				navClip.selectID();			}						currentTrack = Gaia.api.getValue().substring(1);			trackTimer.start();		}						//		//	Position the Nav and reconfigure layout in the new page		//		public function positionNav(e:GaiaEvent = null):void {						try {				isNavSelect = false;								var isVert:Boolean = ((dataXML.topnav.nav.(@id == currentSection)[0].@orient) == "vert");				navClip.rePosition(isVert);								var branch:String = Gaia.api.getCurrentBranch();				if (branch == null) return;				var page:IPageAsset = Gaia.api.getPage(branch);				if (page.loader == null) return;								var content:MovieClip = page.content;				if (content == null) return;								var navplace:MovieClip = content["navPlaceholder"];				navplace.visible = true;				navplace.addChild(navClip);							} catch (err:Error) {				trace("------------------------------------------------------------------------");				if (e) {					trace("ERROR - Unable to position the nav!  " + e.type);				} else {					trace("ERROR - Unable to position the nav!");				}				trace(">>> dataXML null? " + (dataXML == null));				trace(">> navClip = " + navClip);				trace(">> branch = " + branch);				trace(">> page = " + page);				trace(">> content = " + content);				trace(">> navplace = " + navplace);				trace(err.getStackTrace());			}		}		//________________________________________________________________________________________________________________________________________				private function timedTrack(e:TimerEvent):void {			if (ExternalInterface.available) {				ExternalInterface.call("tracker", currentTrack);			}		}						private function createVIP():void {			if (vipClip == null) vipClip = new VIPWidget( assets.homeXML.xml.vip );			addChild(vipClip);			vipClip.y = stage.stageHeight - (vipClip.height + 70);			vipClip.x = 160 + 105;						TweenMax.from(vipClip, .3, { x:stage.stageWidth, ease:Bounce.easeOut } );		}				public function playSound(req:String):void {			var sndChan:SoundChannel = new SoundChannel();			var cl:Class = getDefinitionByName(req) as Class;			var sndRollOver:Sound = new cl() as Sound;						sndChan = sndRollOver.play();			var st:SoundTransform = new SoundTransform();			st.volume = Global.GLOBALVOLUME;			sndChan.soundTransform = st;		}				private function audioClick(e:MouseEvent):void {			if(!audioMute){				audioMute = true;				audioBut.gotoAndStop(2);				Global.GLOBALVOLUME = 0;			} else {				audioMute = false;				audioBut.gotoAndStop(1);				Global.GLOBALVOLUME = 1;			}		}						public function resortZ(topclip:DisplayObject):void {			addChild(audioBut);			onResize(null);		}						private function onResize(e:Event):void {			if (Gaia.api && audioBut) {				// FLUSH RIGHT				//audioBut.x = ((Gaia.api.getWidth() - stage.stageWidth)/2) + (stage.stageWidth - audioBut.width) ;								// FLUSH LEFT				audioBut.x = ((Gaia.api.getWidth() - stage.stageWidth)/2)			}		}		//___________________________________________________________________________________________________________________________________________________________________________________________________					}}